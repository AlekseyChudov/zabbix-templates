#!/usr/bin/python

import argparse
import json
import os
import subprocess

__author__ = 'Aleksey Chudov <aleksey.chudov@gmail.com>'
__date__ = '21 Jan 2018'
__version__ = '1.0.2'


class CCISS(object):

    CCISS_VOL_STATUS = '/usr/bin/cciss_vol_status'
    HP_DEVICES = (('HP', 'LOGICAL VOLUME'),)
    SYSFS_BLOCK = '/sys/block'

    @classmethod
    def discovery(cls, args):
        discovery = {'data': []}
        for block_dev in os.listdir(cls.SYSFS_BLOCK):
            block_path = os.path.join(cls.SYSFS_BLOCK, block_dev)
            model_path = os.path.join(block_path, 'device/model')
            vendor_path = os.path.join(block_path, 'device/vendor')

            if os.path.isfile(model_path) and os.path.isfile(vendor_path):
                with open(model_path) as model_f, open(vendor_path) as vendor_f:
                    model = model_f.read().strip()
                    vendor = vendor_f.read().strip()

                if (vendor, model) in cls.HP_DEVICES:
                    device = os.path.join('/dev', block_dev.replace('!', '/'))
                    item = {'{#HP_DEVICE}': device}
                    discovery['data'].append(item)

        return json.dumps(discovery, separators=(',', ':'))

    @classmethod
    def status(cls, args):
        status = ''
        try:
            command = (cls.CCISS_VOL_STATUS, args.device)
            output = subprocess.check_output(command, stderr=subprocess.STDOUT)

            for line in output.splitlines():
                if line.startswith(args.device + ':'):
                    if 'OK' in line:
                        status = 'OK'
                    else:
                        status = line
                    break

            if not status:
                status = '; '.join(output.strip().splitlines())

        except subprocess.CalledProcessError as e:
            status = '; '.join(e.output.strip().splitlines())

        return status


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true')

    subparsers = parser.add_subparsers()

    subparser_a = subparsers.add_parser('discovery')
    subparser_a.set_defaults(func=CCISS.discovery)

    subparser_b = subparsers.add_parser('status')
    subparser_b.add_argument('device')
    subparser_b.set_defaults(func=CCISS.status)

    return parser.parse_known_args()[0]


def main():
    args = parse_args()
    try:
        print(args.func(args))
    except Exception as e:
        if args.debug:
            raise
        print(e)


if __name__ == '__main__':
    main()
