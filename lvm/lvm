#!/usr/bin/python

import argparse
import json

import lvm

__author__ = 'Aleksey Chudov <aleksey.chudov@gmail.com>'
__date__ = '30 Apr 2017'
__version__ = '1.0.3'


class LVM2ZBX(object):

    def __init__(self):
        self._args = self._parse_args()
        try:
            print(self._args.method())
        except Exception as e:
            if self._args.debug:
                raise
            print(e)

    def _parse_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-d', '--debug', action='store_true')

        parent_parser = argparse.ArgumentParser(add_help=False)
        parent_parser.add_argument('vg_name')
        parent_parser.add_argument('lv_name')

        subparsers = parser.add_subparsers()
        subparser = subparsers.add_parser('discovery')
        subparser.set_defaults(method=self._discovery)

        for name in ['data_percent', 'metadata_percent']:
            subparser = subparsers.add_parser(name, parents=[parent_parser])
            subparser.set_defaults(method=self._get_percent, property=name)

        return parser.parse_known_args()[0]

    @staticmethod
    def _is_thin_pool(lv):
        return lv.getProperty('lv_attr')[0][0] == 't'

    def _discovery(self):
        data = []
        for vg_name in lvm.listVgNames():
            vg = lvm.vgOpen(vg_name)
            for lv in vg.listLVs():
                if self._is_thin_pool(lv):
                    data.append(
                        {'{#LVM_VG}': vg_name, '{#LVM_LV}': lv.getName()})
            vg.close()
        return json.dumps({'data': data}, separators=(',', ':'))

    def _get_percent(self):
        vg = lvm.vgOpen(self._args.vg_name)
        lv = vg.lvFromName(self._args.lv_name)
        return lv.getProperty(self._args.property)[0] / 1000000.0


if __name__ == '__main__':
    LVM2ZBX()
