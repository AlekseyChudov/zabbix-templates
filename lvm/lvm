#!/usr/bin/python

import argparse
import json

import lvm

__author__ = 'Aleksey Chudov <aleksey.chudov@gmail.com>'
__date__ = '4 Jun 2016'
__version__ = '1.0.0'


class LVM(object):

    @staticmethod
    def is_thin_pool(lv):
        return lv.getProperty('lv_attr')[0][0] == 't'

    @classmethod
    def discovery(cls, args):
        discovery = {'data': []}
        try:
            data = []
            vg_names = lvm.listVgNames()
            for vg_name in vg_names:
                vg = lvm.vgOpen(vg_name, 'r')
                lv_list = vg.listLVs()
                for lv in lv_list:
                    if cls.is_thin_pool(lv):
                        item = {'{#LVM_VG}': vg_name,
                                '{#LVM_LV}': lv.getName()}
                        data.append(item)
            discovery['data'] = data
        except Exception as e:
            if args.debug:
                raise e
        return json.dumps(discovery, separators=(',', ':'))

    @classmethod
    def get_percent(cls, args):
        status = 0.0
        try:
            vg = lvm.vgOpen(args.vg_name, 'r')
            lv = vg.lvFromName(args.lv_name)
            status = lv.getProperty(args.property)[0] / 1000000.0
        except Exception as e:
            if args.debug:
                raise e
        return status


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true')

    subparsers = parser.add_subparsers()

    subparser_a = subparsers.add_parser('discovery')
    subparser_a.set_defaults(func=LVM.discovery)

    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('vg_name')
    parent_parser.add_argument('lv_name')

    subparser_b = subparsers.add_parser(
        'data_percent', parents=[parent_parser])
    subparser_b.set_defaults(func=LVM.get_percent, property='data_percent')

    subparser_c = subparsers.add_parser(
        'metadata_percent', parents=[parent_parser])
    subparser_c.set_defaults(func=LVM.get_percent, property='metadata_percent')

    return parser.parse_known_args()[0]


def main():
    args = parse_args()
    try:
        print(args.func(args))
    except Exception as e:
        if args.debug:
            raise e
        print(e)


if __name__ == '__main__':
    main()
