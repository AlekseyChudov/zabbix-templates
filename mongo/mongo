#!/usr/bin/python

from __future__ import print_function

import argparse
import pprint
import sys

import pymongo

__author__ = 'Aleksey Chudov <aleksey.chudov@gmail.com>'
__date__ = '7 Dec 2016'
__version__ = '1.0.0'

USAGE = """usage examples:
    mongo --help

    mongo ping
    mongo ping -d
    mongo ping ok

    mongo top
    mongo top -d
    mongo top totals
    mongo top totals/admin.system.indexes
    mongo top totals/admin.system.indexes/total
    mongo top totals/admin.system.indexes/total/count
"""

COMMANDS = [
    'buildInfo',
    'hostInfo',
    'isMaster',
    'listDatabases',
    'ping',
    'replSetGetStatus',
    'serverStatus',
    'top'
]

DEFAULT = {
    'debug': False,
    'uri': 'mongodb://localhost:27017'
}


class MongoZBX(object):

    ERROR_VALUE = 'ZBX_NOTSUPPORTED'

    def __init__(self, args):
        self.args = args
        self.client = pymongo.MongoClient(self.args.uri)

    def __call__(self):
        response = self._get_response()
        return self._get_result(response)

    def _get_response(self):
        response = self.client.admin.command(self.args.command)
        if self.args.debug:
            debug('response', response)

        return response

    def _get_result(self, obj):
        results = []
        try:
            for param in self.args.params:
                if param == self.args.params[-1] and isinstance(obj, list):
                    for elem in obj:
                        results.append(elem[param])
                else:
                    obj = obj[param]
        except (KeyError, TypeError):
            return self.ERROR_VALUE

        if not results:
            if isinstance(obj, dict):
                results.extend(obj.keys())
            elif isinstance(obj, list):
                results.extend(obj)
            else:
                results.append(obj)

        return join_string(results)


def debug(name, value):
    print('{0}: '.format(name), file=sys.stderr)
    pprint.pprint(value, stream=sys.stderr)


def join_string(iterable, function=None):
    return ' '.join(filter(function, map(str, iterable))).strip()


def split_string(string, sep=None, function=None):
    return filter(function, string.split(sep))


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, epilog=USAGE)

    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('-u', '--uri')
    parser.add_argument('command', choices=COMMANDS)
    parser.add_argument('param', nargs='?', default='')

    args = parser.parse_args(namespace=argparse.Namespace(**DEFAULT))
    args.params = split_string(args.param, '/')
    args.zabbix_get = MongoZBX(args)

    if args.debug:
        debug('args', args)

    return args


def main():
    args = parse_args()
    try:
        print(args.zabbix_get())
    except Exception as e:
        if args.debug:
            raise
        print(e)


if __name__ == '__main__':
    main()
